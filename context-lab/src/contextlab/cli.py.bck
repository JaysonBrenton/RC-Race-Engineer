# filepath: src/contextlab/cli.py
from __future__ import annotations
import shutil
from pathlib import Path
import typer
from rich.console import Console
from rich.table import Table

from .config import load_settings
from .store import VectorStore
from .llm import answer
from .memory import Memory
from .scraper import scrape_site, search_index  # NEW

app = typer.Typer(add_completion=False, help="Context Engineering CLI")
con = Console()

@app.command()
def init():
    """Ensure required directories exist. Why: consistent environment."""
    for p in ["data/raw", "data/chroma", ".ctx", "templates", "data/raw/web", "data/web"]:
        Path(p).mkdir(parents=True, exist_ok=True)
    con.print("Initialized directories.")

@app.command()
def ingest(directory: str = typer.Argument(..., help="Directory with .md/.txt"),
           rebuild: bool = typer.Option(False, help="Recreate collection")):
    s = load_settings()
    vs = VectorStore(s)
    if rebuild:
        vs.rebuild()
    total = vs.ingest_dir(Path(directory))
    con.print(f"Ingested chunks: [bold]{total}[/]")

@app.command()
def ask(q: str = typer.Argument(..., help="Your question"),
        show_context: bool = typer.Option(False, help="Print assembled context")):
    s = load_settings()
    text, info = answer(q, s, show_context=show_context)
    meta = Table(show_header=True, header_style="bold")
    meta.add_column("Key"); meta.add_column("Value")
    for k in ["question_tokens", "context_tokens", "budget", "included", "session_rules_injected"]:
        if k in info:
            meta.add_row(k, str(info.get(k)))
    con.print(meta)
    if show_context:
        con.rule("Context")
        con.print(info.get("context", ""))
    con.rule("Answer")
    con.print(text)

@app.command("show-context")
def show_context(q: str = typer.Argument(..., help="Question to assemble context for")):
    from .assembler import Assembler
    s = load_settings()
    vs = VectorStore(s)
    mem = Memory(s)
    asm = Assembler(s, vs, mem)
    ctx, info = asm.build(q)
    con.print(f"Budget: {info['budget']}, used: {info['context_tokens']}")
    con.rule("Context")
    con.print(ctx)

@app.command()
def clear():
    s = load_settings()
    chroma_path = Path(s.store_path)
    if chroma_path.exists():
        shutil.rmtree(chroma_path)
    chroma_path.mkdir(parents=True, exist_ok=True)
    Memory(s).clear()
    con.print("Cleared vector store and memory.")

# -------------------- NEW: scraper commands --------------------

@app.command()
def scrape(
    allowlist: str = typer.Option("templates/scrape-allowlist.txt", help="Seed list of URLs (one per line)"),
    delay: float = typer.Option(2.0, help="Seconds between requests (politeness)"),
    max_pages: int = typer.Option(200, help="Max pages to fetch per run"),
    force: bool = typer.Option(False, help="Rewrite markdown even if unchanged"),
):
    """Scrape live.liverc.com into data/raw/web + data/web/index.jsonl."""
    s = load_settings()
    apath = (Path(s.root_dir) / allowlist).resolve()
    stats = scrape_site(apath, delay=delay, max_pages=max_pages, force=force)
    meta = Table(title="Scrape summary", show_header=True, header_style="bold")
    meta.add_column("metric"); meta.add_column("value")
    for k, v in stats.items():
        meta.add_row(k, str(v))
    con.print(meta)

@app.command()
def search(
    driver: str = typer.Option(None, help="Driver name contains"),
    transponder: str = typer.Option(None, help="Transponder contains"),
    event: str = typer.Option(None, help="Event name contains"),
    date_from: str = typer.Option(None, help="YYYY-MM-DD inclusive"),
    date_to: str = typer.Option(None, help="YYYY-MM-DD inclusive"),
):
    """Filter structured web index (data/web/index.jsonl)."""
    rows = search_index(driver=driver, transponder=transponder, event=event, date_from=date_from, date_to=date_to)
    if not rows:
        con.print("No matches.")
        raise typer.Exit(code=0)

    tbl = Table(show_header=True, header_style="bold")
    for c in ["driver_name", "transponder", "event_name", "event_date", "url", "path_md"]:
        tbl.add_column(c)
    for r in rows[:500]:
        tbl.add_row(
            r.get("driver_name") or "",
            r.get("transponder") or "",
            r.get("event_name") or "",
            r.get("event_date") or "",
            r.get("url") or "",
            r.get("path_md") or "",
        )
    con.print(tbl)

# Allow `python -m contextlab.cli`
if __name__ == "__main__":
    app()

